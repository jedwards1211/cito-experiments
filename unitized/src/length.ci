public enum LengthUnit {
  Meters,
  Centimeters,
  Kilometers,
  Feet,
  Yards,
  Inches,
  Miles 
}

public class Length {
  LengthUnit Unit;
  double Value;

  public void Set!(double value, LengthUnit unit) {
    Value = value;
    Unit = unit;
  }

  public static Length# Create(double value, LengthUnit unit) {
    Length# length = new Length();
    length.Set(value, unit);
    return length;
  }

  public static void Test() {
    Length() length;
    Length() length2;
    length = length2;
  }

  public static Length# Meters(double value) { return Create(value, LengthUnit.Meters); }
  public static Length# Centimeters(double value) { return Create(value, LengthUnit.Centimeters); }
  public static Length# Kilometers(double value) { return Create(value, LengthUnit.Kilometers); }
  public static Length# Feet(double value) { return Create(value, LengthUnit.Feet); }
  public static Length# Yards(double value) { return Create(value, LengthUnit.Yards); }
  public static Length# Inches(double value) { return Create(value, LengthUnit.Inches); }
  public static Length# Miles(double value) { return Create(value, LengthUnit.Miles); } 

  public static Angle# atan2(Length# y, Length# x) {
    return Angle.Radians(1);
  }

  public double ConvertTo(LengthUnit unit) {
    return Convert(Value, Unit, unit);
  }

  public double ToMeters() { return ConvertTo(LengthUnit.Meters); }
  public double ToCentimeters() { return ConvertTo(LengthUnit.Centimeters); }
  public double ToKilometers() { return ConvertTo(LengthUnit.Kilometers); }
  public double ToFeet() { return ConvertTo(LengthUnit.Feet); }
  public double ToYards() { return ConvertTo(LengthUnit.Yards); }
  public double ToInches() { return ConvertTo(LengthUnit.Inches); }
  public double ToMiles() { return ConvertTo(LengthUnit.Miles); } 

  static double Convert(double value, LengthUnit from, LengthUnit to) {
    if (from == to) return value;
    return FromBase(ToBase(value, from), to);
  }

  static double FromBase(double value, LengthUnit to) {
    switch (to) {
    case LengthUnit.Meters: return value;
    case LengthUnit.Centimeters: return value * 100;
    case LengthUnit.Kilometers: return value * 0.001;
    case LengthUnit.Feet: return value / 0.3048;
    case LengthUnit.Miles: return value / (5280 * 0.3048);
    case LengthUnit.Yards: return value / (3 * 0.3048);
    case LengthUnit.Inches: return value * 12 / 0.3048;
    }
  }

  static double ToBase(double value, LengthUnit from) {
    switch (from) {
    case LengthUnit.Meters: return value;
    case LengthUnit.Centimeters: return value * 0.01;
    case LengthUnit.Kilometers: return value * 1000;
    case LengthUnit.Feet: return value * 0.3048;
    case LengthUnit.Miles: return value * 5280 * 0.3048;
    case LengthUnit.Yards: return value * 3 * 0.3048;
    case LengthUnit.Inches: return value * 0.3048 / 12;
    }
  }
}
